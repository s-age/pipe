{
  "session_id": "87f62be12921826b4217b5854a09a3fea929606b249ec36d1c1c45a1d8c92de4",
  "created_at": "2025-10-24T07:47:32.911516+09:00",
  "purpose": "テストだ",
  "background": "新機能のテスト",
  "roles": [],
  "multi_step_reasoning_enabled": false,
  "token_count": 7932,
  "hyperparameters": {},
  "references": [
    {
      "path": "README.md",
      "disabled": false
    }
  ],
  "turns": [
    {
      "type": "user_task",
      "instruction": "README.mdを要約して、ツールの使用は禁止",
      "timestamp": "2025-10-24T07:47:32.913171+09:00"
    },
    {
      "type": "model_response",
      "content": "`pipe` is a tool designed to give developers complete control over conversational context, acting as a \"clean jailbreak from LLM obfuscation.\" It focuses on context engineering by allowing free manipulation of history, extraction of essential information, and ensuring the agent understands its purpose, history, and current task without ambiguity.\n\nKey aspects of `pipe` include:\n\n*   **Total Context Control:** It reconstructs prompts with a structured, self-describing JSON Schema, making them token-efficient and understandable for LLMs. The entire history is transparent, saved in readable JSON session files, ensuring auditability and providing a malleable memory for stateless LLMs. Users can retry, refine, edit, delete, and compress with precision.\n*   **Uncompromising Extensibility:** While based on `gemini-cli` by default, its core logic is decoupled, allowing users to integrate with other APIs or frameworks like `claude-code`.\n*   **Core Features:**\n    *   Session-based history stored in human-readable JSON files.\n    *   Structured JSON prompting for improved clarity.\n    *   CLI-driven workflow for starting, continuing, or compressing sessions.\n    *   Extensible backend with configurable execution agents.\n    *   YAML-based configuration (`setting.yml`).\n    *   Token-aware with warnings for exceeding limits.\n    *   Dry Run Mode to inspect JSON prompts before API calls.\n    *   Web UI for visual management and direct history manipulation.\n    *   Automatic backups for safe operations.\n    *   Language support for agent responses.\n    *   \"YOLO Mode\" for automatically accepting all actions.\n    *   In-session TODO list management.\n    *   Advanced agent-driven compression with `Compresser` and `Reviewer` agents for partial compression, summarization policy, and verification.\n    *   Turn-based forking to explore alternative responses.\n\n`pipe` offers three primary routes for context engineering:\n\n1.  **Python Script (Automation & CLI):** Ideal for automation, scripting, and CLI-focused developers for starting, continuing, or compressing sessions.\n2.  **Web UI (Management & Human-in-the-Loop):** Best for intuitive visual management, direct history manipulation, viewing/editing history, forking, and managing sessions.\n3.  **Execution from Agent (Orchestration):** For advanced AI system builders leveraging `pipe`'s context control for multi-agent coordination, role delegation, and small-scale orchestration.\n4.  **Agent-driven Workflows (Compression & Verification):** Utilizes `Compresser` and `Reviewer` agents for surgical compression and quality assurance of session history.\n5.  **Multi-Agent Simulation (e.g., Self-Play):** Facilitates complex multi-agent simulations using natural language and Markdown-defined roles and procedures, as demonstrated by a Reversi self-play example.\n\nThe project is released under the CC0 1.0 Universal Public Domain Dedication, encouraging customization and \"jailbreaking.\"",
      "timestamp": "2025-10-24T07:47:38.750508+09:00"
    }
  ],
  "pools": []
}